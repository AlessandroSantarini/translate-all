{
  "version": 3,
  "sources": ["../src/types/index.ts", "../src/handlers/settings-handler.ts", "../src/handlers/data-handler.ts", "../src/translator.ts", "../src/handlers/html-handler.ts", "../src/main.ts"],
  "sourcesContent": ["export const MODULE_NAME = \"translate-all\";\r\n\r\nexport interface TranslateConfigSettingConfig {\r\n  \"translate-all.apiKey\": string;\r\n  \"translate-all.targetSystem\": string;\r\n  \"translate-all.targetLanguage\": string;\r\n}\r\n\r\nexport type TranslateAllNamespace = typeof MODULE_NAME | ClientSettings.Namespace;\r\n\r\ntype GetKeys<N extends string, SettingPath extends PropertyKey> = SettingPath extends `${N}.${infer Name}`\r\n  ? Name\r\n  : never;\r\nexport type KeyFor<N extends TranslateAllNamespace> = GetKeys<N, keyof TranslateConfigSettingConfig>;\r\n\r\nexport interface TranslateFunction {\r\n  (app: JournalPageSheet | ItemSheet, html: JQuery<HTMLElement>, description: string, path: string): Promise<void>;\r\n}\r\n\r\nexport enum SupportedSystems {\r\n  DND5E = \"Dungeons & Dragons 5E\",\r\n  PATHFINDER2E = \"Pathfinder 2E\"\r\n}\r\n\r\nexport enum SupportedLanguages {\r\n  ENGLISH = \"english\",\r\n  ITALIAN = \"italian\"\r\n}\r\n\r\nexport enum SupportedEntries {\r\n  JOURNAL = \"journal\",\r\n  ITEM = \"item\"\r\n}\r\n\r\nexport const Directories = {\r\n  [SupportedSystems.DND5E]: {\r\n    [SupportedEntries.JOURNAL]: \"text.content\",\r\n    [SupportedEntries.ITEM]: \"item\"\r\n  },\r\n  [SupportedSystems.PATHFINDER2E]: {\r\n    [SupportedEntries.JOURNAL]: 'text.content',\r\n    [SupportedEntries.ITEM]: 'system.description.value'\r\n  }\r\n}\r\n\r\n", "import { KeyFor, SupportedSystems, TranslateAllNamespace } from \"../types\";\r\n\r\nexport class TranslateAllSettingHandler {\r\n    gameSettings: Game[\"settings\"] = game.settings!;\r\n    readonly settings = {\r\n        targetSystem: {\r\n            name: \"translate-all.settings.game.system.name\",\r\n            hint: \"translate-all.settings.game.system.hint\",\r\n            scope: \"world\",\r\n            config: true,\r\n            type: String,\r\n            default: SupportedSystems.PATHFINDER2E // Default to Pathfinder 2e\r\n        },\r\n        apiKey: {\r\n            name: \"translate-all.settings.apiKey.name\",\r\n            hint: \"translate-all.settings.apiKey.hint\",\r\n            scope: \"world\",\r\n            config: true,\r\n            type: String,\r\n            default: \"\",\r\n            masked: true\r\n        },\r\n        targetLanguage: {\r\n            name: \"translate-all.settings.language.name\",\r\n            hint: \"translate-all.settings.language.hint\",\r\n            scope: \"world\",\r\n            config: true,\r\n            type: String,\r\n            default: \"Italian\", // Default to Italian\r\n            masked: true\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n    }\r\n\r\n    init(): void {\r\n        this._registerSettings();\r\n    }\r\n\r\n    private _registerSettings(): void {\r\n        this._register(\r\n            \"translate-all\" as TranslateAllNamespace,\r\n            \"targetSystem\" as KeyFor<TranslateAllNamespace>,\r\n            this.settings.targetSystem\r\n        );\r\n        this._register(\r\n            \"translate-all\" as TranslateAllNamespace,\r\n            \"apiKey\" as KeyFor<TranslateAllNamespace>,\r\n            this.settings.apiKey\r\n        );\r\n        this._register(\r\n            \"translate-all\" as TranslateAllNamespace,\r\n            \"targetLanguage\" as KeyFor<TranslateAllNamespace>,\r\n            this.settings.targetLanguage\r\n        );\r\n    }\r\n\r\n    //TODO: Fix this type casting\r\n    _register(\r\n        namespace: TranslateAllNamespace,\r\n        key: KeyFor<TranslateAllNamespace>,\r\n        config: any\r\n    ): void {\r\n        this.gameSettings.register(namespace as 'core', key as KeyFor<'core'>, config);\r\n    }\r\n\r\n    //TODO: Fix this type casting\r\n    static getSetting(\r\n        namespace: TranslateAllNamespace,\r\n        key: KeyFor<TranslateAllNamespace>,\r\n    ): string | boolean | number | object | undefined {\r\n        const gameSettings = game.settings!;\r\n        return gameSettings.get(namespace as 'core', key as KeyFor<'core'>);\r\n    }\r\n}\r\n\r\n", "import { Directories, SupportedEntries, SupportedSystems, TranslateFunction } from \"types\";\r\nimport { TranslateAllSettingHandler } from \"./settings-handler\";\r\n\r\nexport class DataHandler {\r\n    static getDescription(app: JournalPageSheet | ItemSheet, type: SupportedEntries) {\r\n        const system = TranslateAllSettingHandler.getSetting(\"translate-all\", \"targetSystem\") as SupportedSystems;\r\n\r\n        if (type === SupportedEntries.JOURNAL) {\r\n            return DataHandler.getDescriptionFromJournal(app as JournalPageSheet, system);\r\n        } else if (type === SupportedEntries.ITEM) {\r\n            return DataHandler.getDescriptionFromItem(app as ItemSheet, system);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    static getDescriptionFromJournal(app: JournalPageSheet, system: SupportedSystems): string | undefined {\r\n        const item = app.object;\r\n        switch (system) {\r\n            case SupportedSystems.PATHFINDER2E:\r\n            case SupportedSystems.DND5E:\r\n                return item.text.content;\r\n            default:\r\n                return item.text.content;\r\n        }\r\n    }\r\n\r\n    static getDescriptionFromItem(app: ItemSheet, system: SupportedSystems): string | undefined {\r\n        const item = app.object;\r\n        switch (system) {\r\n            case SupportedSystems.PATHFINDER2E:\r\n                return (item.system as any).description.value; //TODO: fix this type casting\r\n            case SupportedSystems.DND5E:\r\n                return ''; //TODO: IMPLEMENTATION NEEDED\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n\r\n    static getPathToUpdate(item: SupportedEntries): string {\r\n        const system = TranslateAllSettingHandler.getSetting(\"translate-all\", \"targetSystem\") as SupportedSystems;\r\n        return Directories[system][item];\r\n    }\r\n\r\n    static async getTranslatedDescription(app: JournalPageSheet | ItemSheet, html: JQuery<HTMLElement>, item: SupportedEntries, translateFN: TranslateFunction) {\r\n        const description = DataHandler.getDescription(app, item);\r\n        if (!description) {\r\n            ui?.notifications?.error(\"No description found for this journal page.\");\r\n            return;\r\n        };\r\n        const path = DataHandler.getPathToUpdate(item);\r\n        translateFN(app, html, description, path);\r\n    }\r\n}", "import { TranslateAllSettingHandler } from \"handlers/settings-handler\";\r\nimport { SupportedLanguages, SupportedSystems } from \"types\";\r\n\r\nexport class Translator {\r\n    static async translate(description: string): Promise<string | undefined> {\r\n        return await Translator.translateWithChatGPT(description);\r\n    }\r\n\r\n    static generatePrompt(system: SupportedSystems, language: SupportedLanguages, description: string): string {\r\n        const prompt = `Translate the following ${system} item/spell description into ${language}:\\n\\n\r\n            Keep the same format and structure, like HTML tags, and do not translate the item name or any specific game terms. \r\n            Don not add any additional code encapsulation or formatting. Just return the translated text.\\n\\n\r\n            ${description}.\"`;\r\n        return prompt;\r\n    }\r\n\r\n    static async translateWithChatGPT(description: string): Promise<string | undefined> {\r\n        let response;\r\n        const apiKey = TranslateAllSettingHandler.getSetting(\"translate-all\", \"apiKey\");\r\n        const system = TranslateAllSettingHandler.getSetting(\"translate-all\", \"targetSystem\") as SupportedSystems;\r\n        const language = TranslateAllSettingHandler.getSetting(\"translate-all\", \"targetLanguage\") as SupportedLanguages;\r\n    \r\n        const prompt = Translator.generatePrompt(system, language, description);\r\n        try {\r\n            response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${apiKey}`\r\n                },\r\n                body: JSON.stringify({\r\n                    model: \"gpt-4o-mini\",\r\n                    messages: [{ role: \"user\", content: prompt }]\r\n                })\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error calling ChatGPT API:\", error);\r\n        }\r\n\r\n        if (!response?.ok) {\r\n            ui?.notifications?.error(\"ChatGPT API call failed.\");\r\n            return undefined;\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.choices?.[0]?.message?.content ?? undefined;\r\n    }\r\n}", "import { Translator } from \"translator\";\r\n\r\nexport class HTMLHandler {\r\n    static async translateApp(\r\n        app: JournalPageSheet | ItemSheet,\r\n        html: JQuery<HTMLElement>,\r\n        description: string,\r\n        path: string\r\n    ): Promise<void> {\r\n        const header = html.find(\".window-header\");\r\n        if (header.find(\"button.translate-btn\").length) return;\r\n\r\n        const btn = $(\r\n            `<button class=\"translate-btn\" style=\"margin-left: 8px;\">\r\n          Translate Description\r\n        </button>`\r\n        );\r\n\r\n        btn.on(\"click\", async () => {\r\n            console.log('Translate button clicked', path);\r\n            const item = app.object;\r\n            console.log(item)\r\n\r\n            const translated = await Translator.translate(description);\r\n            if (!translated) {\r\n                ui?.notifications?.error(\"Translation failed or returned empty.\");\r\n                return;\r\n            }\r\n\r\n            console.log(\"Translated description:\", translated);\r\n            console.log(\"Updating item description at path:\", path);\r\n            try {\r\n                await item.updateSource({ [path]: translated });\r\n            } catch (error) {\r\n                console.error(\"Error updating item description:\", error);\r\n            }\r\n\r\n            await app.render(true);\r\n        });\r\n\r\n        header.append(btn);\r\n    }\r\n}", "import { DataHandler } from \"handlers/data-handler\";\r\nimport { HTMLHandler } from \"handlers/html-handler\";\r\nimport { TranslateAllSettingHandler } from \"handlers/settings-handler\";\r\nimport { SupportedEntries } from \"types\";\r\n\r\nHooks.once(\"init\", () => {\r\n    if (!game.settings) {\r\n        console.error(\"Game settings are not available. This module requires Foundry VTT version 10 or later.\");\r\n        return;\r\n    }\r\n    const settingHandler = new TranslateAllSettingHandler();\r\n    settingHandler.init();\r\n});\r\n\r\nHooks.on(\"renderJournalPageSheet\", async (app: JournalPageSheet,\r\n    html: JQuery<HTMLElement>,\r\n    _data: Record<string, any>) => {\r\n    DataHandler.getTranslatedDescription(app, html, SupportedEntries.JOURNAL, HTMLHandler.translateApp);\r\n});\r\n\r\nHooks.on(\"renderItemSheet\", async (app: ItemSheet,\r\n    html: JQuery<HTMLElement>,\r\n    _data: Record<string, any>) => {\r\n    DataHandler.getTranslatedDescription(app, html, SupportedEntries.ITEM, HTMLHandler.translateApp);\r\n});\r\n"],
  "mappings": "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",
  "names": ["Directories", "TranslateAllSettingHandler", "__name", "namespace", "key", "config", "DataHandler", "_DataHandler", "__name", "app", "type", "system", "TranslateAllSettingHandler", "item", "Directories", "html", "translateFN", "description", "path", "Translator", "_Translator", "__name", "description", "system", "language", "response", "apiKey", "TranslateAllSettingHandler", "prompt", "error", "HTMLHandler", "__name", "app", "html", "description", "path", "header", "btn", "item", "translated", "Translator", "error", "TranslateAllSettingHandler", "app", "html", "_data", "DataHandler", "HTMLHandler"]
}
