"use strict";(()=>{var h=Object.defineProperty;var l=(n,t)=>h(n,"name",{value:t,configurable:!0});var y={"D&D5E":{journal:"text.content",item:"system.description.value"},PF2E:{journal:"text.content",item:"system.description.value"}};var d=class n{static{l(this,"Translator")}static async translate(t){return await n.translateWithChatGPT(t)}static generatePrompt(t,e,a){return`Translate the following ${t} item/spell description into ${e}:


            Keep the same format and structure, like HTML tags, and do not translate the item name or any specific game terms. 
            Don not add any additional code encapsulation or formatting. Just return the translated text.


            ${a}."`}static async getModels(){let t,e=r.getSetting("translate-all","apiKey"),a=r.getSetting("translate-all","apiEndpoint");try{t=await fetch(`${a}/models`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`}})}catch(i){ui?.notifications?.error(`ChatGPT API call failed. ${i}`)}if(!t?.ok){ui?.notifications?.error("ChatGPT API call failed.");return}return(await t.json()).data.reduce((i,g)=>(i[g.id]=g.id,i),{})}static async translateWithChatGPT(t){let e,a=r.getSetting("translate-all","apiKey"),s=r.getSetting("translate-all","apiEndpoint"),o=r.getSetting("translate-all","targetSystem"),i=r.getSetting("translate-all","targetLanguage"),g=r.getSetting("translate-all","targetModel"),m=n.generatePrompt(o,i,t);try{e=await fetch(`${s}/chat/completions`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({model:g,messages:[{role:"user",content:m}]})})}catch(S){ui?.notifications?.error(`ChatGPT API call failed. ${S}`)}if(!e?.ok){ui?.notifications?.error("ChatGPT API call failed.");return}return(await e.json()).choices?.[0]?.message?.content??void 0}};var r=class{static{l(this,"TranslateAllSettingHandler")}gameSettings=game.settings;settings={targetSystem:{name:"translate-all.settings.game.system.name",hint:"translate-all.settings.game.system.hint",scope:"world",config:!0,type:String,default:"PF2E",choices:{"D&D5E":"D&D 5e",PF2E:"Pathfinder 2e"}},apiKey:{name:"translate-all.settings.apiKey.name",hint:"translate-all.settings.apiKey.hint",scope:"world",config:!0,type:String,default:"",masked:!0},apiEndpoint:{name:"translate-all.settings.apiEndpoint.name",hint:"translate-all.settings.apiEndpoint.hint",scope:"world",config:!0,type:String,default:"https://api.openai.com/v1"},targetLanguage:{name:"translate-all.settings.language.name",hint:"translate-all.settings.language.hint",scope:"world",config:!0,type:String,default:"Italian",masked:!0},targetModel:{name:"translate-all.settings.model.name",hint:"translate-all.settings.model.hint",scope:"world",config:!0,type:String,default:"gpt-4o-mini",choices:{}}};constructor(){}async init(){await this._registerSettings()}async _registerSettings(){this._register("translate-all","targetSystem",this.settings.targetSystem),this._register("translate-all","apiKey",this.settings.apiKey),this._register("translate-all","apiEndpoint",this.settings.apiEndpoint),this._register("translate-all","targetLanguage",this.settings.targetLanguage);let t=await d.getModels();t&&(this.settings.targetModel.choices=t),this._register("translate-all","targetModel",this.settings.targetModel)}_register(t,e,a){this.gameSettings.register(t,e,a)}static getSetting(t,e){return game.settings.get(t,e)}};var c=class n{static{l(this,"DataHandler")}static getDescription(t,e){let a=r.getSetting("translate-all","targetSystem");if(e==="journal")return n.getDescriptionFromJournal(t,a);if(e==="item")return n.getDescriptionFromItem(t,a)}static getDescriptionFromJournal(t,e){switch(e){case"PF2E":return t.object.text.content||void 0;case"D&D5E":return(t?.options).document.text.content||void 0;default:return}}static getDescriptionFromItem(t,e){switch(e){case"PF2E":return(t?.object?.system).description.value;case"D&D5E":return t?.options?.document.system.description.value||void 0;default:return}}static getPathToUpdate(t){let e=r.getSetting("translate-all","targetSystem");return y[e][t]}static async getTranslatedDescription(t,e,a,s){let o=n.getDescription(t,a);if(!o)return;let i=n.getPathToUpdate(a);s(t,e,o,i)}};var p=class n{static{l(this,"HTMLHandler")}static async translateApp(t,e,a,s){let i=(e instanceof jQuery?e:$(e)).find(".window-header");if(i.find("button.translate-btn").length)return;let g=$(`<button class="translate-btn" style="margin-left: 8px; margin-top: 8px;">
          Translate Description
        </button>`);g.on("click",async()=>{let m=await d.translate(a);if(!m){ui?.notifications?.error("Translation failed or returned empty.");return}await n.updateDescription(t,m,s)}),i.append(g)}static async updateDescription(t,e,a){let s=r.getSetting("translate-all","targetSystem");s==="D&D5E"?await this.update5eDescription(t,e,a):s==="PF2E"&&await this.updatePF2EDescription(t,e,a)}static async update5eDescription(t,e,a){try{await t.document.update({[a]:e}),t.render(!0),t.close()}catch(s){ui?.notifications?.error(`Error updating item description: ${s}`)}}static async updatePF2EDescription(t,e,a){let s=t.object;try{a.includes("system")?await s.update({[a]:e}):await s.updateSource({[a]:e})}catch(o){ui?.notifications?.error(`Error updating item description: ${o}`)}t.object.render(!0),await t.object.sheet?.close(),await t.render(!0),await t.close()}};Hooks.once("init",async()=>{if(!game.settings){ui?.notifications?.error("Game settings are not available. This module requires Foundry VTT version 10 or later.");return}await new r().init()});Hooks.on("renderJournalPageSheet",async(n,t)=>{c.getTranslatedDescription(n,t,"journal",p.translateApp)});Hooks.on("renderItemSheet",async(n,t)=>{c.getTranslatedDescription(n,t,"item",p.translateApp)});Hooks.on("renderItemSheet5e",async(n,t)=>{c.getTranslatedDescription(n,t,"item",p.translateApp)});Hooks.on("renderJournalEntryPageSheet",async(n,t)=>{if(r.getSetting("translate-all","targetSystem")!=="D&D5E"){console.warn("This feature is only available for D&D 5E.");return}c.getTranslatedDescription(n,t,"journal",p.translateApp)});})();
//# sourceMappingURL=main.js.map
