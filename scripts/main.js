"use strict";(()=>{var S=Object.defineProperty;var i=(n,t)=>S(n,"name",{value:t,configurable:!0});var u={"Dungeons & Dragons 5E":{journal:"text.content",item:"item"},"Pathfinder 2E":{journal:"text.content",item:"system.description.value"}};var r=class{static{i(this,"TranslateAllSettingHandler")}gameSettings=game.settings;settings={targetSystem:{name:"translate-all.settings.game.system.name",hint:"translate-all.settings.game.system.hint",scope:"world",config:!0,type:String,default:"Pathfinder 2E"},apiKey:{name:"translate-all.settings.apiKey.name",hint:"translate-all.settings.apiKey.hint",scope:"world",config:!0,type:String,default:"",masked:!0},targetLanguage:{name:"translate-all.settings.language.name",hint:"translate-all.settings.language.hint",scope:"world",config:!0,type:String,default:"Italian",masked:!0}};constructor(){}init(){this._registerSettings()}_registerSettings(){this._register("translate-all","targetSystem",this.settings.targetSystem),this._register("translate-all","apiKey",this.settings.apiKey),this._register("translate-all","targetLanguage",this.settings.targetLanguage)}_register(t,e,a){this.gameSettings.register(t,e,a)}static getSetting(t,e){return game.settings.get(t,e)}};var c=class n{static{i(this,"DataHandler")}static getDescription(t,e){let a=r.getSetting("translate-all","targetSystem");if(e==="journal")return n.getDescriptionFromJournal(t,a);if(e==="item")return n.getDescriptionFromItem(t,a)}static getDescriptionFromJournal(t,e){let a=t.object;switch(e){case"Pathfinder 2E":case"Dungeons & Dragons 5E":return a.text.content;default:return a.text.content}}static getDescriptionFromItem(t,e){let a=t.object;switch(e){case"Pathfinder 2E":return a.system.description.value;case"Dungeons & Dragons 5E":return"";default:return}}static getPathToUpdate(t){let e=r.getSetting("translate-all","targetSystem");return u[e][t]}static async getTranslatedDescription(t,e,a,s){let o=n.getDescription(t,a);if(!o){ui?.notifications?.error("No description found for this journal page.");return}let l=n.getPathToUpdate(a);s(t,e,o,l)}};var m=class n{static{i(this,"Translator")}static async translate(t){return await n.translateWithChatGPT(t)}static generatePrompt(t,e,a){return`Translate the following ${t} item/spell description into ${e}:


            Keep the same format and structure, like HTML tags, and do not translate the item name or any specific game terms. 
            Don not add any additional code encapsulation or formatting. Just return the translated text.


            ${a}."`}static async translateWithChatGPT(t){let e,a=r.getSetting("translate-all","apiKey"),s=r.getSetting("translate-all","targetSystem"),o=r.getSetting("translate-all","targetLanguage"),l=n.generatePrompt(s,o,t);try{e=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({model:"gpt-4o-mini",messages:[{role:"user",content:l}]})})}catch(g){console.error("Error calling ChatGPT API:",g)}if(!e?.ok){ui?.notifications?.error("ChatGPT API call failed.");return}return(await e.json()).choices?.[0]?.message?.content??void 0}};var p=class{static{i(this,"HTMLHandler")}static async translateApp(t,e,a,s){let o=e.find(".window-header");if(o.find("button.translate-btn").length)return;let l=$(`<button class="translate-btn" style="margin-left: 8px;">
          Translate Description
        </button>`);l.on("click",async()=>{console.log("Translate button clicked",s);let d=t.object;console.log(d);let g=await m.translate(a);if(!g){ui?.notifications?.error("Translation failed or returned empty.");return}console.log("Translated description:",g),console.log("Updating item description at path:",s);try{await d.updateSource({[s]:g})}catch(y){console.error("Error updating item description:",y)}await t.render(!0)}),o.append(l)}};Hooks.once("init",()=>{if(!game.settings){console.error("Game settings are not available. This module requires Foundry VTT version 10 or later.");return}new r().init()});Hooks.on("renderJournalPageSheet",async(n,t,e)=>{c.getTranslatedDescription(n,t,"journal",p.translateApp)});Hooks.on("renderItemSheet",async(n,t,e)=>{c.getTranslatedDescription(n,t,"item",p.translateApp)});})();
//# sourceMappingURL=main.js.map
